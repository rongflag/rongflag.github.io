<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>security(6)自动 登录</title>
    <url>/posts/security6.html</url>
    <content><![CDATA[<p>自动登录很简单cookie和databse。。拉胯了，拉胯了 以后在说吧</p>
<a id="more"></a>

<p>全文内容</p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>数据库用户这些和以前一样就不说了。po出配置吧，但是都需要cookie</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span>(debug = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.security.remember-me.key&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String rememberKey;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        JdbcTokenRepositoryImpl tokenRepository = <span class="keyword">new</span> JdbcTokenRepositoryImpl();</span><br><span class="line"></span><br><span class="line">        tokenRepository.setDataSource(dataSource);</span><br><span class="line"></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/admin/**"</span>)</span><br><span class="line">                .hasRole(<span class="string">"admin"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/user/**"</span>)</span><br><span class="line">                .hasRole(<span class="string">"user"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/api/**"</span>)</span><br><span class="line">                .permitAll()</span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .rememberMe()</span><br><span class="line">                .userDetailsService(userDetailsService)</span><br><span class="line"><span class="comment">//                这个可以重写自定记录的逻辑  实现AbstractRememberMeServices</span></span><br><span class="line"><span class="comment">//                .rememberMeServices(myremenberService)</span></span><br><span class="line">                <span class="comment">// 1. 散列加密方案 这个可要可不要</span></span><br><span class="line">                .key(rememberKey)</span><br><span class="line">                <span class="comment">// 7天有效期  不设置默认两周</span></span><br><span class="line">                .tokenValiditySeconds(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>)</span><br><span class="line">                <span class="comment">// 2. 持久化令牌方案  不配置就是cookie 配置了就是数据库</span></span><br><span class="line"><span class="comment">//                .tokenRepository(tokenRepository)</span></span><br><span class="line">                .and()</span><br><span class="line">                .logout()</span><br><span class="line">                .logoutUrl(<span class="string">"/myLogout"</span>)</span><br><span class="line">                <span class="comment">// 注销成功，重定向到该路径下</span></span><br><span class="line">                .logoutSuccessUrl(<span class="string">"/"</span>)</span><br><span class="line">                .invalidateHttpSession(<span class="keyword">true</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .csrf()</span><br><span class="line">                .disable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> NoOpPasswordEncoder.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="关注的源码"><a href="#关注的源码" class="headerlink" title="关注的源码"></a>关注的源码</h2><h3 id="1-RememberMeConfigurer"><a href="#1-RememberMeConfigurer" class="headerlink" title="1. RememberMeConfigurer"></a>1. RememberMeConfigurer</h3><p>这里默认 默认TokenBasedRememberMeServices</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> AbstractRememberMeServices <span class="title">createRememberMeServices</span><span class="params">(H http, String key)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.tokenRepository == <span class="keyword">null</span></span><br><span class="line">				? createTokenBasedRememberMeServices(http, key)</span><br><span class="line">				: createPersistentRememberMeServices(http, key);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> AbstractRememberMeServices <span class="title">createTokenBasedRememberMeServices</span><span class="params">(H http,</span></span></span><br><span class="line"><span class="function"><span class="params">			String key)</span> </span>&#123;</span><br><span class="line">		UserDetailsService userDetailsService = getUserDetailsService(http);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> TokenBasedRememberMeServices(key, userDetailsService);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> PersistentTokenRepository tokenRepository = <span class="keyword">new</span> InMemoryTokenRepositoryImpl()；</span><br><span class="line">    这里是</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private AbstractRememberMeServices createRememberMeServices(H http, String key)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">		return this.tokenRepository &#x3D;&#x3D; null</span><br><span class="line">				? createTokenBasedRememberMeServices(http, key)</span><br><span class="line">				: createPersistentRememberMeServices(http, key);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>所有重写都可以根据这个里面需要的进行配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_REMEMBER_ME_NAME = <span class="string">"remember-me"</span>;</span><br><span class="line">	<span class="keyword">private</span> AuthenticationSuccessHandler authenticationSuccessHandler;</span><br><span class="line">	<span class="keyword">private</span> String key;</span><br><span class="line">	<span class="keyword">private</span> RememberMeServices rememberMeServices;</span><br><span class="line">	<span class="keyword">private</span> LogoutHandler logoutHandler;</span><br><span class="line">	<span class="keyword">private</span> String rememberMeParameter = DEFAULT_REMEMBER_ME_NAME;</span><br><span class="line">	<span class="keyword">private</span> String rememberMeCookieName = DEFAULT_REMEMBER_ME_NAME;</span><br><span class="line">	<span class="keyword">private</span> String rememberMeCookieDomain;</span><br><span class="line">	<span class="keyword">private</span> PersistentTokenRepository tokenRepository;</span><br><span class="line">	<span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line">	<span class="keyword">private</span> Integer tokenValiditySeconds;</span><br><span class="line">	<span class="keyword">private</span> Boolean useSecureCookie;</span><br><span class="line">	<span class="keyword">private</span> Boolean alwaysRemember;</span><br></pre></td></tr></table></figure>



<h3 id="1-AbstractRememberMeServices"><a href="#1-AbstractRememberMeServices" class="headerlink" title="1. AbstractRememberMeServices"></a>1. AbstractRememberMeServices</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> UserDetails <span class="title">processAutoLoginCookie</span><span class="params">(String[] cookieTokens,</span></span></span><br><span class="line"><span class="function"><span class="params">			HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> RememberMeAuthenticationException, UsernameNotFoundException</span>;</span><br></pre></td></tr></table></figure>



<h3 id="1-1-TokenBasedRememberMeServices"><a href="#1-1-TokenBasedRememberMeServices" class="headerlink" title="1.1 TokenBasedRememberMeServices"></a>1.1 TokenBasedRememberMeServices</h3><p>生成散列加密的部分makeTokenSignature</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 在成功的验证后生成新的token</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> UserDetails <span class="title">processAutoLoginCookie</span><span class="params">(String[] cookieTokens,</span></span></span><br><span class="line"><span class="function"><span class="params">			HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (cookieTokens.length != <span class="number">3</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> InvalidCookieException(<span class="string">"Cookie token did not contain 3"</span></span><br><span class="line">					+ <span class="string">" tokens, but contained '"</span> + Arrays.asList(cookieTokens) + <span class="string">"'"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">long</span> tokenExpiryTime;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			tokenExpiryTime = <span class="keyword">new</span> Long(cookieTokens[<span class="number">1</span>]).longValue();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (NumberFormatException nfe) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> InvalidCookieException(</span><br><span class="line">					<span class="string">"Cookie token[1] did not contain a valid number (contained '"</span></span><br><span class="line">							+ cookieTokens[<span class="number">1</span>] + <span class="string">"')"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (isTokenExpired(tokenExpiryTime)) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> InvalidCookieException(<span class="string">"Cookie token[1] has expired (expired on '"</span></span><br><span class="line">					+ <span class="keyword">new</span> Date(tokenExpiryTime) + <span class="string">"'; current time is '"</span> + <span class="keyword">new</span> Date()</span><br><span class="line">					+ <span class="string">"')"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Check the user exists.</span></span><br><span class="line">		<span class="comment">// Defer lookup until after expiry time checked, to possibly avoid expensive</span></span><br><span class="line">		<span class="comment">// database call.</span></span><br><span class="line"></span><br><span class="line">		UserDetails userDetails = getUserDetailsService().loadUserByUsername(</span><br><span class="line">				cookieTokens[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Check signature of token matches remaining details.</span></span><br><span class="line">		<span class="comment">// Must do this after user lookup, as we need the DAO-derived password.</span></span><br><span class="line">		<span class="comment">// If efficiency was a major issue, just add in a UserCache implementation,</span></span><br><span class="line">		<span class="comment">// but recall that this method is usually only called once per HttpSession - if</span></span><br><span class="line">		<span class="comment">// the token is valid,</span></span><br><span class="line">		<span class="comment">// it will cause SecurityContextHolder population, whilst if invalid, will cause</span></span><br><span class="line">		<span class="comment">// the cookie to be cancelled.</span></span><br><span class="line">		String expectedTokenSignature = makeTokenSignature(tokenExpiryTime,</span><br><span class="line">				userDetails.getUsername(), userDetails.getPassword());</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!equals(expectedTokenSignature, cookieTokens[<span class="number">2</span>])) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> InvalidCookieException(<span class="string">"Cookie token[2] contained signature '"</span></span><br><span class="line">					+ cookieTokens[<span class="number">2</span>] + <span class="string">"' but expected '"</span> + expectedTokenSignature + <span class="string">"'"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> userDetails;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 散列加密</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">makeTokenSignature</span><span class="params">(<span class="keyword">long</span> tokenExpiryTime, String username,</span></span></span><br><span class="line"><span class="function"><span class="params">			String password)</span> </span>&#123;</span><br><span class="line">		String data = username + <span class="string">":"</span> + tokenExpiryTime + <span class="string">":"</span> + password + <span class="string">":"</span> + getKey();</span><br><span class="line">		MessageDigest digest;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			digest = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No MD5 algorithm available!"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> String(Hex.encode(digest.digest(data.getBytes())));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 成功过后</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoginSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">			Authentication successfulAuthentication)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		String username = retrieveUserName(successfulAuthentication);</span><br><span class="line">		String password = retrievePassword(successfulAuthentication);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// If unable to find a username and password, just abort as</span></span><br><span class="line">		<span class="comment">// TokenBasedRememberMeServices is</span></span><br><span class="line">		<span class="comment">// unable to construct a valid token in this case.</span></span><br><span class="line">		<span class="keyword">if</span> (!StringUtils.hasLength(username)) &#123;</span><br><span class="line">			logger.debug(<span class="string">"Unable to retrieve username"</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!StringUtils.hasLength(password)) &#123;</span><br><span class="line">			UserDetails user = getUserDetailsService().loadUserByUsername(username);</span><br><span class="line">			password = user.getPassword();</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (!StringUtils.hasLength(password)) &#123;</span><br><span class="line">				logger.debug(<span class="string">"Unable to obtain password for user: "</span> + username);</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> tokenLifetime = calculateLoginLifetime(request, successfulAuthentication);</span><br><span class="line">		<span class="keyword">long</span> expiryTime = System.currentTimeMillis();</span><br><span class="line">		<span class="comment">// SEC-949</span></span><br><span class="line">		expiryTime += <span class="number">1000L</span> * (tokenLifetime &lt; <span class="number">0</span> ? TWO_WEEKS_S : tokenLifetime);</span><br><span class="line"></span><br><span class="line">		String signatureValue = makeTokenSignature(expiryTime, username, password);</span><br><span class="line"></span><br><span class="line">		setCookie(<span class="keyword">new</span> String[] &#123; username, Long.toString(expiryTime), signatureValue &#125;,</span><br><span class="line">				tokenLifetime, request, response);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">			logger.debug(<span class="string">"Added remember-me cookie for user '"</span> + username</span><br><span class="line">					+ <span class="string">"', expiry: '"</span> + <span class="keyword">new</span> Date(expiryTime) + <span class="string">"'"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>security</category>
      </categories>
      <tags>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis-plus学习</title>
    <url>/posts/mybatis-plus.html</url>
    <content><![CDATA[<h1 id="Hello"><a href="#Hello" class="headerlink" title="Hello"></a>Hello</h1><p>你好世界</p>
<a id="more"></a>

<p>全文内容</p>
]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>security(5)自定义认证实现验证码</title>
    <url>/posts/security5.html</url>
    <content><![CDATA[<h2 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h2><p>你好世界</p>
<a id="more"></a>

<p>全文内容</p>
<p>这里使用<strong>自定义认证</strong>来实现验证码，也就是实现Filter的另外一种方式，其实我也不太熟:joy:,将就看吧。</p>
<p>[TOC]</p>
<p>在Security验证对象其实就是主体<strong>（Principal）</strong>，主体包含了所有能够经过验证而获得系统访问权限的用户，设备或者其他系统。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Authentication</span> <span class="keyword">extends</span> <span class="title">Principal</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 主体权限列表</span></span><br><span class="line">	Collection&lt;? extends GrantedAuthority&gt; getAuthorities();</span><br><span class="line">	<span class="comment">// 获取主体凭证 通常为用户密码</span></span><br><span class="line">	<span class="function">Object <span class="title">getCredentials</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">// 获取主体携带的详细信息</span></span><br><span class="line">	<span class="function">Object <span class="title">getDetails</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">// 获取主体，通常是用户名</span></span><br><span class="line">	<span class="function">Object <span class="title">getPrincipal</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">// 主体是否验证成功</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">isAuthenticated</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setAuthenticated</span><span class="params">(<span class="keyword">boolean</span> isAuthenticated)</span> <span class="keyword">throws</span> IllegalArgumentException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Authentication</span> <span class="keyword">extends</span> <span class="title">Principal</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 获得主体权限</span></span><br><span class="line">	Collection&lt;? extends GrantedAuthority&gt; getAuthorities();</span><br><span class="line">	<span class="comment">// </span></span><br><span class="line">	<span class="function">Object <span class="title">getCredentials</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">// </span></span><br><span class="line">	<span class="function">Object <span class="title">getDetails</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">// </span></span><br><span class="line">	<span class="function">Object <span class="title">getPrincipal</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">// </span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">isAuthenticated</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">// </span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setAuthenticated</span><span class="params">(<span class="keyword">boolean</span> isAuthenticated)</span> <span class="keyword">throws</span> IllegalArgumentException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AuthenticationProvider 是Security的一个验证过程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AuthenticationProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 验证过程 成功返回一个验证完成Authentication</span></span><br><span class="line">	<span class="function">Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> AuthenticationException</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 是否支持验证当前的Authentication类型</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; authentication)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>验证AuthenticationProvider是靠ProviderManager来管理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderManager</span> <span class="keyword">implements</span> <span class="title">AuthenticationManager</span>, <span class="title">MessageSourceAware</span>,</span></span><br><span class="line"><span class="class">		<span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">	=====================================================================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> AuthenticationEventPublisher eventPublisher = <span class="keyword">new</span> NullEventPublisher();</span><br><span class="line">     <span class="comment">// 多个验证的过程</span></span><br><span class="line">	<span class="keyword">private</span> List&lt;AuthenticationProvider&gt; providers = Collections.emptyList();</span><br><span class="line">	<span class="keyword">protected</span> MessageSourceAccessor messages = SpringSecurityMessageSource.getAccessor();</span><br><span class="line">	<span class="keyword">private</span> AuthenticationManager parent;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> eraseCredentialsAfterAuthentication = <span class="keyword">true</span>;</span><br><span class="line">==============================================</span><br><span class="line">	<span class="comment">// 验证的过程</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">		Class&lt;? extends Authentication&gt; toTest = authentication.getClass();</span><br><span class="line">		AuthenticationException lastException = <span class="keyword">null</span>;</span><br><span class="line">		AuthenticationException parentException = <span class="keyword">null</span>;</span><br><span class="line">		Authentication result = <span class="keyword">null</span>;</span><br><span class="line">		Authentication parentResult = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">boolean</span> debug = logger.isDebugEnabled();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (AuthenticationProvider provider : getProviders()) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!provider.supports(toTest)) &#123;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 验证通过就跳出循环</span></span><br><span class="line">				result = provider.authenticate(authentication);</span><br><span class="line">				<span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">					copyDetails(authentication, result);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (AccountStatusException | InternalAuthenticationServiceException e) &#123;</span><br><span class="line">				prepareException(e, authentication);</span><br><span class="line">				<span class="comment">// SEC-546: Avoid polling additional providers if auth failure is due to</span></span><br><span class="line">				<span class="comment">// invalid account status</span></span><br><span class="line">				<span class="keyword">throw</span> e;</span><br><span class="line">			&#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">				lastException = e;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (result == <span class="keyword">null</span> &amp;&amp; parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="comment">// Allow the parent to try.</span></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				result = parentResult = parent.authenticate(authentication);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (ProviderNotFoundException e) &#123;</span><br><span class="line">				<span class="comment">// ignore as we will throw below if no other exception occurred prior to</span></span><br><span class="line">				<span class="comment">// calling parent and the parent</span></span><br><span class="line">				<span class="comment">// may throw ProviderNotFound even though a provider in the child already</span></span><br><span class="line">				<span class="comment">// handled the request</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">				lastException = parentException = e;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (eraseCredentialsAfterAuthentication</span><br><span class="line">					&amp;&amp; (result <span class="keyword">instanceof</span> CredentialsContainer)) &#123;</span><br><span class="line">				<span class="comment">// Authentication is complete. Remove credentials and other secret data</span></span><br><span class="line">				<span class="comment">// from authentication</span></span><br><span class="line">				((CredentialsContainer) result).eraseCredentials();</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// If the parent AuthenticationManager was attempted and successful than it will publish an AuthenticationSuccessEvent</span></span><br><span class="line">			<span class="comment">// This check prevents a duplicate AuthenticationSuccessEvent if the parent AuthenticationManager already published it</span></span><br><span class="line">			<span class="keyword">if</span> (parentResult == <span class="keyword">null</span>) &#123;</span><br><span class="line">				eventPublisher.publishAuthenticationSuccess(result);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> result;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Parent was null, or didn't authenticate (or throw an exception).</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (lastException == <span class="keyword">null</span>) &#123;</span><br><span class="line">			lastException = <span class="keyword">new</span> ProviderNotFoundException(messages.getMessage(</span><br><span class="line">					<span class="string">"ProviderManager.providerNotFound"</span>,</span><br><span class="line">					<span class="keyword">new</span> Object[] &#123; toTest.getName() &#125;,</span><br><span class="line">					<span class="string">"No AuthenticationProvider found for &#123;0&#125;"</span>));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// If the parent AuthenticationManager was attempted and failed than it will publish an AbstractAuthenticationFailureEvent</span></span><br><span class="line">		<span class="comment">// This check prevents a duplicate AbstractAuthenticationFailureEvent if the parent AuthenticationManager already published it</span></span><br><span class="line">		<span class="keyword">if</span> (parentException == <span class="keyword">null</span>) &#123;</span><br><span class="line">			prepareException(lastException, authentication);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">throw</span> lastException;</span><br><span class="line">	&#125;</span><br><span class="line">=====================================================</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-AuthenticationProvider"><a href="#2-AuthenticationProvider" class="headerlink" title="2.AuthenticationProvider"></a>2.AuthenticationProvider</h2><p>验证其实就是AuthenticationProvider，所以这里需要自定义验证。其中Security，包含了基本的几种：</p>
<ol>
<li>HTTP层面的认证技术，包括HTTP基本认证和HTTP摘要认证</li>
<li>基于LDAP的认证技术</li>
<li>聚焦于证明用户身份的OpenID认证技术</li>
<li>聚焦于授权的OAuth认证技术</li>
<li>系统内维护的用户名和密码认证技术</li>
</ol>
<p>其中最广泛的的就是<strong>系统内维护的用户名和密码认证技术</strong>，这里因为需要和数据库交互，Security提供了一个抽象的AuthenticationProvider,<strong>AbstractUserDetailsAuthenticationProvider</strong>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractUserDetailsAuthenticationProvider</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">		<span class="title">AuthenticationProvider</span>, <span class="title">InitializingBean</span>, <span class="title">MessageSourceAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 附加认证过程 -- 核心方法</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">additionalAuthenticationChecks</span><span class="params">(UserDetails userDetails,</span></span></span><br><span class="line"><span class="function"><span class="params">			UsernamePasswordAuthenticationToken authentication)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> AuthenticationException</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 认证过程</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">		Assert.isInstanceOf(UsernamePasswordAuthenticationToken<span class="class">.<span class="keyword">class</span>, <span class="title">authentication</span>,</span></span><br><span class="line"><span class="class">				() -&gt; <span class="title">messages</span>.<span class="title">getMessage</span>(</span></span><br><span class="line">						"AbstractUserDetailsAuthenticationProvider.onlySupports",</span><br><span class="line">						<span class="string">"Only UsernamePasswordAuthenticationToken is supported"</span>));</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Determine username</span></span><br><span class="line">		String username = (authentication.getPrincipal() == <span class="keyword">null</span>) ? <span class="string">"NONE_PROVIDED"</span></span><br><span class="line">				: authentication.getName();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">boolean</span> cacheWasUsed = <span class="keyword">true</span>;</span><br><span class="line">		UserDetails user = <span class="keyword">this</span>.userCache.getUserFromCache(username);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">			cacheWasUsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 先检索用户</span></span><br><span class="line">				user = retrieveUser(username,</span><br><span class="line">						(UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (UsernameNotFoundException notFound) &#123;</span><br><span class="line">				logger.debug(<span class="string">"User '"</span> + username + <span class="string">"' not found"</span>);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (hideUserNotFoundExceptions) &#123;</span><br><span class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(messages.getMessage(</span><br><span class="line">							<span class="string">"AbstractUserDetailsAuthenticationProvider.badCredentials"</span>,</span><br><span class="line">							<span class="string">"Bad credentials"</span>));</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">throw</span> notFound;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			Assert.notNull(user,</span><br><span class="line">					<span class="string">"retrieveUser returned null - a violation of the interface contract"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 检查用户账户是否可用</span></span><br><span class="line">			preAuthenticationChecks.check(user);</span><br><span class="line">            <span class="comment">// 附加认证</span></span><br><span class="line">			additionalAuthenticationChecks(user,</span><br><span class="line">					(UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (AuthenticationException exception) &#123;</span><br><span class="line">			<span class="keyword">if</span> (cacheWasUsed) &#123;</span><br><span class="line">				<span class="comment">// There was a problem, so try again after checking</span></span><br><span class="line">				<span class="comment">// we're using latest data (i.e. not from the cache)</span></span><br><span class="line">				cacheWasUsed = <span class="keyword">false</span>;</span><br><span class="line">				user = retrieveUser(username,</span><br><span class="line">						(UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">				preAuthenticationChecks.check(user);</span><br><span class="line">				additionalAuthenticationChecks(user,</span><br><span class="line">						(UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">throw</span> exception;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 检查用户密码是否过期</span></span><br><span class="line">		postAuthenticationChecks.check(user);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!cacheWasUsed) &#123;</span><br><span class="line">			<span class="keyword">this</span>.userCache.putUserInCache(user);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Object principalToReturn = user;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (forcePrincipalAsString) &#123;</span><br><span class="line">			principalToReturn = user.getUsername();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 返回一个认证通过的Authentication</span></span><br><span class="line">		<span class="keyword">return</span> createSuccessAuthentication(principalToReturn, authentication, user);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 检索用户 （核心方法）</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> UserDetails <span class="title">retrieveUser</span><span class="params">(String username,</span></span></span><br><span class="line"><span class="function"><span class="params">			UsernamePasswordAuthenticationToken authentication)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> AuthenticationException</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 此认证过程支持UsernamePasswordAuthenticationToken及衍生对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; authentication)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (UsernamePasswordAuthenticationToken<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">				.<span class="title">isAssignableFrom</span>(<span class="title">authentication</span>))</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还有一个重要的实现类<strong>DaoAuthenticationProvider</strong>，主要实现了密码的编码</p>
<h2 id="3-实际编码"><a href="#3-实际编码" class="headerlink" title="3.实际编码"></a>3.实际编码</h2><p>因为这个我们需要HttpRequest  所以需要<strong>MyWebAuthenticationDetailsSource</strong>，然后补充到<strong>MyWebAuthenticationDetails</strong>实际验证验证码，最后通过<strong>MyAuthenticationProvider</strong>也就<strong>DaoAuthenticationProvider</strong>来执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAuthenticationProvider</span> <span class="keyword">extends</span> <span class="title">DaoAuthenticationProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法注入UserDetailService和PasswordEncoder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyAuthenticationProvider</span><span class="params">(UserDetailsService userDetailsService, PasswordEncoder passwordEncoder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setUserDetailsService(userDetailsService);</span><br><span class="line">        <span class="keyword">this</span>.setPasswordEncoder(passwordEncoder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">additionalAuthenticationChecks</span><span class="params">(UserDetails userDetails, UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        MyWebAuthenticationDetails details = (MyWebAuthenticationDetails) usernamePasswordAuthenticationToken.getDetails();</span><br><span class="line">        <span class="comment">// 验证码验证逻辑</span></span><br><span class="line">        String imageCode = details.getImageCode();</span><br><span class="line">        String savedImageCode = details.getSavedImageCode();</span><br><span class="line">        <span class="comment">// 检验图形验证码</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(imageCode) || StringUtils.isEmpty(savedImageCode) || !imageCode.equals(savedImageCode)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> VerificationCodeException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用父类进行密码验证</span></span><br><span class="line">        <span class="keyword">super</span>.additionalAuthenticationChecks(userDetails, usernamePasswordAuthenticationToken);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebAuthenticationDetails</span> <span class="keyword">extends</span> <span class="title">WebAuthenticationDetails</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String imageCode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String savedImageCode;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getImageCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> imageCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSavedImageCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> savedImageCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 补充用户提交的验证码和session保存的验证码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyWebAuthenticationDetails</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(request);</span><br><span class="line">        <span class="keyword">this</span>.imageCode = request.getParameter(<span class="string">"captcha"</span>);</span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        <span class="keyword">this</span>.savedImageCode = (String) session.getAttribute(<span class="string">"captcha"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(<span class="keyword">this</span>.savedImageCode)) &#123;</span><br><span class="line">            <span class="comment">// 随手清除验证码，不管是失败还是成功，所以客户端应在登录失败时刷新验证码</span></span><br><span class="line">            session.removeAttribute(<span class="string">"captcha"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebAuthenticationDetailsSource</span> <span class="keyword">implements</span> <span class="title">AuthenticationDetailsSource</span>&lt;<span class="title">HttpServletRequest</span>, <span class="title">WebAuthenticationDetails</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebAuthenticationDetails <span class="title">buildDetails</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyWebAuthenticationDetails(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationDetailsSource&lt;HttpServletRequest, WebAuthenticationDetails&gt; myWebAuthenticationDetailsSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationProvider authenticationProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 应用AuthenticationProvider</span></span><br><span class="line">        auth.authenticationProvider(authenticationProvider);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/admin/api/**"</span>).hasRole(<span class="string">"ADMIN"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/user/api/**"</span>).hasRole(<span class="string">"USER"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/app/api/**"</span>, <span class="string">"/captcha.jpg"</span>).permitAll()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .authenticationDetailsSource(myWebAuthenticationDetailsSource)</span><br><span class="line">                .failureHandler(<span class="keyword">new</span> SecurityAuthenticationFailureHandler())</span><br><span class="line">                .successHandler(<span class="keyword">new</span> SecurityAuthenticationSuccessHandler())</span><br><span class="line">                .loginPage(<span class="string">"/myLogin.html"</span>)</span><br><span class="line">                .loginProcessingUrl(<span class="string">"/login"</span>)</span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable();;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> NoOpPasswordEncoder.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他的代码就是上一章的代码。</p>
<h2 id="4-对比一下Filter和Provider"><a href="#4-对比一下Filter和Provider" class="headerlink" title="4.对比一下Filter和Provider"></a>4.对比一下Filter和Provider</h2><p>因为我们密码<strong>UsernamePasswordAuthenticationFilter</strong>是Filter。</p>
<p>Filter:</p>
<ol>
<li>这个是Servlet层面的，简单易理解；</li>
<li>可自定义顺序；</li>
</ol>
<p>Provider：</p>
<p>​    1.交给Security来控制，感觉更优雅；</p>
<p>​    2.顺序是必须要有UserDetails,才能继续。（个人暂时理解，不确定）</p>
<p>如果没有什么特殊要求还是用<strong>Filter</strong>吧</p>
]]></content>
      <categories>
        <category>security</category>
      </categories>
      <tags>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title>security(4)Filter实现验证码</title>
    <url>/posts/security4.html</url>
    <content><![CDATA[<p>用验证嘛来</p>
<p>这章主要说一下security的filter。这里以验证码的filter作为实例进行验证</p>
<p>有的只能靠debug来看顺序</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>addFilterBefore(filterA,filterB)</td>
<td>添加A在B在前</td>
</tr>
<tr>
<td>addFilter(filter)</td>
<td>添加一个</td>
</tr>
<tr>
<td>addFilterAfter(filterA,filterB)</td>
<td>添加A在B在后</td>
</tr>
<tr>
<td>addFilterAt()</td>
<td>在同一顺序</td>
</tr>
</tbody></table>
<a id="more"></a>

<p>全文内容</p>
<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.penggle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kaptcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>kaptcha配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CaptchaConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Producer <span class="title">captcha</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 配置图形验证码的基本参数</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 图片宽度</span></span><br><span class="line">        properties.setProperty(<span class="string">"kaptcha.image.width"</span>, <span class="string">"150"</span>);</span><br><span class="line">        <span class="comment">// 图片长度</span></span><br><span class="line">        properties.setProperty(<span class="string">"kaptcha.image.height"</span>, <span class="string">"50"</span>);</span><br><span class="line">        <span class="comment">// 字符集</span></span><br><span class="line">        properties.setProperty(<span class="string">"kaptcha.textproducer.char.string"</span>, <span class="string">"0123456789"</span>);</span><br><span class="line">        <span class="comment">// 字符长度</span></span><br><span class="line">        properties.setProperty(<span class="string">"kaptcha.textproducer.char.length"</span>, <span class="string">"4"</span>);</span><br><span class="line">        Config config = <span class="keyword">new</span> Config(properties);</span><br><span class="line">        <span class="comment">// 使用默认的图形验证码实现，当然也可以自定义实现</span></span><br><span class="line">        DefaultKaptcha defaultKaptcha = <span class="keyword">new</span> DefaultKaptcha();</span><br><span class="line">        defaultKaptcha.setConfig(config);</span><br><span class="line">        <span class="keyword">return</span> defaultKaptcha;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CaptchaController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Producer captchaProducer;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/captcha.jpg"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getCaptcha</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 设置内容类型</span></span><br><span class="line">        response.setContentType(<span class="string">"image/jpeg"</span>);</span><br><span class="line">        <span class="comment">// 创建验证码文本</span></span><br><span class="line">        String capText = captchaProducer.createText();</span><br><span class="line">        <span class="comment">// 将验证码文本设置到session</span></span><br><span class="line">        request.getSession().setAttribute(<span class="string">"captcha"</span>, capText);</span><br><span class="line">        <span class="comment">// 创建验证码图片</span></span><br><span class="line">        BufferedImage bi = captchaProducer.createImage(capText);</span><br><span class="line">        <span class="comment">// 获取响应输出流</span></span><br><span class="line">        ServletOutputStream out = response.getOutputStream();</span><br><span class="line">        <span class="comment">// 将图片验证码数据写到响应输出流</span></span><br><span class="line">        ImageIO.write(bi, <span class="string">"jpg"</span>, out);</span><br><span class="line">        <span class="comment">// 推送并关闭响应输出流</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>filter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VerificationCodeFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AuthenticationFailureHandler authenticationFailureHandler = <span class="keyword">new</span> SecurityAuthenticationFailureHandler();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 非登录请求不校验验证码</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">"/login"</span>.equals(httpServletRequest.getRequestURI())) &#123;</span><br><span class="line">            filterChain.doFilter(httpServletRequest, httpServletResponse);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                verificationCode(httpServletRequest);</span><br><span class="line">                filterChain.doFilter(httpServletRequest, httpServletResponse);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (VerificationCodeException e) &#123;</span><br><span class="line">                authenticationFailureHandler.onAuthenticationFailure(httpServletRequest, httpServletResponse, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">verificationCode</span> <span class="params">(HttpServletRequest httpServletRequest)</span> <span class="keyword">throws</span> VerificationCodeException </span>&#123;</span><br><span class="line">        String requestCode = httpServletRequest.getParameter(<span class="string">"captcha"</span>);</span><br><span class="line">        HttpSession session = httpServletRequest.getSession();</span><br><span class="line">        String savedCode = (String) session.getAttribute(<span class="string">"captcha"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(savedCode)) &#123;</span><br><span class="line">            <span class="comment">// 随手清除验证码，不管是失败还是成功，所以客户端应在登录失败时刷新验证码</span></span><br><span class="line">            session.removeAttribute(<span class="string">"captcha"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 校验不通过抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(requestCode) || StringUtils.isEmpty(savedCode) || !requestCode.equals(savedCode)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> VerificationCodeException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Security</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/admin/**"</span>).hasRole(<span class="string">"admin"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/user/**"</span>).hasRole(<span class="string">"user"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/api/**"</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">"/captcha.jpg"</span>).permitAll()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .loginPage(<span class="string">"/myLogin.html"</span>)</span><br><span class="line">                .loginProcessingUrl(<span class="string">"/login"</span>)</span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .cors().and().csrf().disable();</span><br><span class="line"></span><br><span class="line">        http.addFilterBefore(<span class="keyword">new</span> VerificationCodeFilter(),UsernamePasswordAuthenticationFilter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//        http.addFilter()</span></span><br><span class="line"><span class="comment">//        http.addFilterAfter()</span></span><br><span class="line"><span class="comment">//        http.addFilterA</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> NoOpPasswordEncoder.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Acced Form<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-top"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>LOGIN FORM<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"password"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: flex;"</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 新增图形验证码的输入框 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"captcha"</span> <span class="attr">placeholder</span>=<span class="string">"captcha"</span> /&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 图片指向图形验证码API --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/captcha.jpg"</span> <span class="attr">alt</span>=<span class="string">"captcha"</span> <span class="attr">height</span>=<span class="string">"50px"</span> <span class="attr">width</span>=<span class="string">"150px"</span> <span class="attr">style</span>=<span class="string">"margin-left: 20px;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"forgot"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>forgot Password<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Login"</span> &gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-bottom"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>New User <span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&amp;nbsp Here<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>security</category>
      </categories>
      <tags>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title>番外篇HttpSecurity配置意思</title>
    <url>/posts/security_f1.html</url>
    <content><![CDATA[<p>Security番外篇</p>
<p>这篇主要说的是 HttpSecurity各种配置的方法及意义。这个用到哪里就会说到哪里</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.authorizeRequests()</span><br><span class="line">               .antMatchers(<span class="string">"/admin/api/**"</span>).hasIpAddress(<span class="string">""</span>)</span><br><span class="line">               .antMatchers(<span class="string">"/admin/api/**"</span>).hasRole(<span class="string">"admin"</span>)</span><br><span class="line">               .antMatchers(<span class="string">"/user/api/**"</span>).hasRole(<span class="string">"user"</span>)</span><br><span class="line">               .antMatchers(<span class="string">"/app/api/**"</span>, <span class="string">"/captcha.jpg"</span>).permitAll()</span><br><span class="line">               .anyRequest().authenticated()</span><br><span class="line">               .and()</span><br><span class="line">               .formLogin()</span><br><span class="line">               .failureHandler(<span class="keyword">new</span> SecurityAuthenticationFailureHandler())</span><br><span class="line">               .successHandler(<span class="keyword">new</span> SecurityAuthenticationSuccessHandler())</span><br><span class="line">               .loginPage(<span class="string">"/myLogin.html"</span>)</span><br><span class="line">               .loginProcessingUrl(<span class="string">"/login"</span>)</span><br><span class="line">               .permitAll()</span><br><span class="line">               .and()</span><br><span class="line">               .csrf()</span><br><span class="line">               .disable();</span><br></pre></td></tr></table></figure>

<p>其实我们需要好好考虑一下HttpSecurity那么多配置方法到底代表什么意思。我们一起来说一下常用的方法吧。</p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>说明</strong></th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td><strong>openidLogin()</strong></td>
<td>用于基于 OpenId 的验证</td>
<td>OpenIDLoginConfigurer</td>
</tr>
<tr>
<td><strong>headers()</strong></td>
<td>将安全标头添加到响应</td>
<td></td>
</tr>
<tr>
<td><strong>cors()</strong></td>
<td>配置跨域资源共享（ CORS ）</td>
<td></td>
</tr>
<tr>
<td><strong>sessionManagement()</strong></td>
<td>允许配置会话管理</td>
<td></td>
</tr>
<tr>
<td><strong>portMapper()</strong></td>
<td>允许配置一个PortMapper(HttpSecurity#(getSharedObject(class)))，其他提供SecurityConfigurer的对象使用 PortMapper 从 HTTP 重定向到 HTTPS 或者从 HTTPS 重定向到 HTTP。默认情况下，Spring Security使用一个PortMapperImpl映射 HTTP 端口8080到 HTTPS 端口8443，HTTP 端口80到 HTTPS 端口443</td>
<td></td>
</tr>
<tr>
<td><strong>jee()</strong></td>
<td>配置基于容器的预认证。 在这种情况下，认证由Servlet容器管理</td>
<td></td>
</tr>
<tr>
<td><strong>x509()</strong></td>
<td>配置基于x509的认证</td>
<td></td>
</tr>
<tr>
<td><strong>rememberMe</strong></td>
<td>允许配置“记住我”的验证</td>
<td></td>
</tr>
<tr>
<td><a href="#authorizeRequests"><strong>authorizeRequests()</strong></a></td>
<td>允许基于使用HttpServletRequest限制访问</td>
<td></td>
</tr>
<tr>
<td><strong>requestCache()</strong></td>
<td>允许配置请求缓存</td>
<td></td>
</tr>
<tr>
<td><strong>exceptionHandling()</strong></td>
<td>允许配置错误处理</td>
<td></td>
</tr>
<tr>
<td><strong>securityContext()</strong></td>
<td>在HttpServletRequests之间的SecurityContextHolder上设置SecurityContext的管理。 当使用WebSecurityConfigurerAdapter时，这将自动应用</td>
<td></td>
</tr>
<tr>
<td><strong>servletApi()</strong></td>
<td>将HttpServletRequest方法与在其上找到的值集成到SecurityContext中。 当使用WebSecurityConfigurerAdapter时，这将自动应用</td>
<td></td>
</tr>
<tr>
<td><strong>csrf()</strong></td>
<td>添加 CSRF 支持，使用WebSecurityConfigurerAdapter时，默认启用</td>
<td></td>
</tr>
<tr>
<td><strong>logout()</strong></td>
<td>添加退出登录支持。当使用WebSecurityConfigurerAdapter时，这将自动应用。默认情况是，访问URL”/ logout”，使HTTP Session无效来清除用户，清除已配置的任何#rememberMe()身份验证，清除SecurityContextHolder，然后重定向到”/login?success”</td>
<td></td>
</tr>
<tr>
<td><strong>anonymous()</strong></td>
<td>允许配置匿名用户的表示方法。 当与WebSecurityConfigurerAdapter结合使用时，这将自动应用。 默认情况下，匿名用户将使用org.springframework.security.authentication.AnonymousAuthenticationToken表示，并包含角色 “ROLE_ANONYMOUS”</td>
<td></td>
</tr>
<tr>
<td><strong>formLogin()</strong></td>
<td>指定支持基于表单的身份验证。如果未指定FormLoginConfigurer#loginPage(String)，则将生成默认登录页面</td>
<td></td>
</tr>
<tr>
<td><strong>oauth2Login()</strong></td>
<td>根据外部OAuth 2.0或OpenID Connect 1.0提供程序配置身份验证</td>
<td></td>
</tr>
<tr>
<td><strong>requiresChannel()</strong></td>
<td>配置通道安全。为了使该配置有用，必须提供至少一个到所需信道的映射</td>
<td></td>
</tr>
<tr>
<td><strong>httpBasic()</strong></td>
<td>配置 Http Basic 验证</td>
<td></td>
</tr>
<tr>
<td><strong>addFilterAt()</strong></td>
<td>在指定的Filter类的位置添加过滤器</td>
<td></td>
</tr>
<tr>
<td>and()</td>
<td>重新获得HttpSercurity</td>
<td></td>
</tr>
<tr>
<td>permitAll()</td>
<td>不允许匿名访问，不需要权限</td>
<td></td>
</tr>
</tbody></table>
<ol>
<li><p><a href="#authorizeRequests">authorizeRequests</a></p>
<p>返回值： ExpressionInterceptUrlRegistry</p>
</li>
<li><p><a href="#formLogin">formLogin    </a>         </p>
<p>返回值 FormLoginConfigurer</p>
</li>
<li><p><a href="#cors">cors</a>       </p>
<p>返回值  CorsConfigurer</p>
</li>
<li><p>sessionManagement    </p>
<p>返回值 SessionManagementConfigurer</p>
</li>
<li><p><a href="#httpBasic">httpBasic</a>        </p>
<p>返回值 HttpBasicConfigurer</p>
</li>
<li><p>rememberMe                    </p>
<p>返回值 RememberMeConfigurer</p>
</li>
<li><p><a href="#csrf">csrf</a></p>
<p>返回值 CsrfConfigurer</p>
</li>
<li><p>jee() </p>
<p>返回值：JeeConfigurer </p>
</li>
<li><p><a href="#logout">logout</a></p>
<p>返回值： LogoutConfigurer</p>
</li>
<li><p>anonymous</p>
<p>返回值：AnonymousConfigurer</p>
</li>
<li><p>exceptionHandling</p>
<p>返回值：ExceptionHandlingConfigurer</p>
</li>
<li><p>userDetailsService(UserDetailsService userDetailsService)</p>
<p>返回值：HttpSecurity</p>
</li>
<li><p>servletApi</p>
<p>返回值：ServletApiConfigurer</p>
</li>
<li><p>x509() </p>
<p>返回值：X509Configurer </p>
</li>
<li><p>openidLogin()</p>
<p>返回值：OpenIDLoginConfigurer </p>
</li>
<li><p>requestCache </p>
<p>返回值：RequestCacheConfigurer</p>
</li>
<li><p>headers() </p>
<p>返回值：HeadersConfigurer </p>
</li>
<li><p>oauth2Login</p>
<p>返回值：OAuth2LoginConfigurer</p>
</li>
<li><p>oauth2Client</p>
<p>返回值：OAuth2ClientConfigurer</p>
</li>
<li><p>oauth2ResourceServer</p>
<p>返回值：OAuth2ResourceServerConfigurer</p>
</li>
<li><p>requiresChannel</p>
<p>返回值：ChannelRequestMatcherRegistry</p>
</li>
<li><p>portMapper  </p>
<p>返回值：PortMapperConfigurer </p>
</li>
<li><p>beforeConfigure</p>
<p>返回值：void</p>
</li>
<li><p>performBuild</p>
<p>返回值：DefaultSecurityFilterChain</p>
</li>
<li><p>authenticationProvider</p>
<p>返回值：HttpSecurity</p>
</li>
<li><p>securityContext </p>
<p>返回值：SecurityContextConfigurer  </p>
</li>
<li><p>getAuthenticationRegistry</p>
<p>返回值：AuthenticationManagerBuilder</p>
</li>
<li><p>addFilterAfter(Filter filter, Class&lt;? extends Filter&gt; afterFilter)</p>
<p>返回值：HttpSecurity</p>
</li>
<li><p>addFilterBefore(Filter filter,Class&lt;? extends Filter&gt; beforeFilter)、</p>
<p>返回值：HttpSecurity</p>
</li>
<li><p>addFilter(Filter filter)</p>
<p>返回值：HttpSecurity</p>
</li>
<li><p>addFilterAt(Filter filter, Class&lt;? extends Filter&gt; atFilter)</p>
<p>返回值：HttpSecurity</p>
</li>
<li><p>requestMatchers（基本不直接使用）</p>
<p>返回值 RequestMatcherConfigurer</p>
</li>
<li><p>requestMatcher(RequestMatcher requestMatcher)（基本不直接使用）</p>
<p>返回值：HttpSecurity</p>
</li>
<li><p>antMatcher(String antPattern)（基本不直接使用）</p>
<p>返回值：HttpSecurity</p>
</li>
<li><p>mvcMatcher(String mvcPattern)（基本不直接使用）</p>
<p>返回值：HttpSecurity</p>
</li>
<li><p>regexMatcher(String pattern)（基本不直接使用）</p>
<p>返回值：HttpSecurity</p>
</li>
</ol>
<h2 id="1-authorizeRequests"><a href="#1-authorizeRequests" class="headerlink" title="1.authorizeRequests()"></a><a name="authorizeRequests">1.authorizeRequests()</a></h2><p>执行这个方法后，主要是配置各种请求路径，资源与权限的关系；</p>
<h3 id="1-配置路径"><a href="#1-配置路径" class="headerlink" title="1.配置路径"></a>1.配置路径</h3><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>anyRequest</td>
<td>所有请求</td>
</tr>
<tr>
<td>antMatchers</td>
<td>配置请求路径</td>
</tr>
<tr>
<td>mvcMatchers</td>
<td></td>
</tr>
<tr>
<td>regexMatchers</td>
<td></td>
</tr>
<tr>
<td>requestMatchers</td>
<td></td>
</tr>
</tbody></table>
<p>执行了这个方法其实才获得了ExpressionUrlAuthorizationConfigurer，下面是介绍：</p>
<blockquote>
<p>​    Adds URL based authorization based upon SpEL expressions to an application. </p>
<p>​    基于应用程序的SpEL表达式的dds基于URL的授权。</p>
<p>At least one {@link org.springframework.web.bind.annotation.RequestMapping} needs to be mapped</p>
<p>to {@link ConfigAttribute}’s for this {@link SecurityContextConfigurer} to have meaning. </p>
<p>至少需要映射一个RequestMapping使SecurityContextConfigurer具有ConfigAttribute意义</p>
</blockquote>
<h3 id="2-配置所需权限操作ExpressionUrlAuthorizationConfigurer"><a href="#2-配置所需权限操作ExpressionUrlAuthorizationConfigurer" class="headerlink" title="2. 配置所需权限操作ExpressionUrlAuthorizationConfigurer"></a>2. 配置所需权限操作ExpressionUrlAuthorizationConfigurer</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> String permitAll = <span class="string">"permitAll"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String denyAll = <span class="string">"denyAll"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String anonymous = <span class="string">"anonymous"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String authenticated = <span class="string">"authenticated"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String fullyAuthenticated = <span class="string">"fullyAuthenticated"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String rememberMe = <span class="string">"rememberMe"</span>;</span><br></pre></td></tr></table></figure>

<p>方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.antMatchers(&quot;&#x2F;user&#x2F;api&#x2F;**&quot;).hasRole(&quot;user&quot;)</span><br><span class="line">.antMatchers(&quot;&#x2F;admin&#x2F;api&#x2F;**&quot;).hasIpAddress(&quot;&quot;)</span><br><span class="line">.antMatchers(&quot;&#x2F;app&#x2F;api&#x2F;**&quot;, &quot;&#x2F;captcha.jpg&quot;).permitAll() # 放弃验证但是必须要登录</span><br><span class="line">.anyRequest().authenticated() # 所有验证</span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>hasAnyRole</td>
<td></td>
</tr>
<tr>
<td>hasRole</td>
<td></td>
</tr>
<tr>
<td>hasAuthority</td>
<td></td>
</tr>
<tr>
<td>hasAnyAuthority</td>
<td></td>
</tr>
<tr>
<td>hasIpAddress</td>
<td></td>
</tr>
<tr>
<td>authenticated</td>
<td></td>
</tr>
</tbody></table>
<h2 id="2-formLogin"><a href="#2-formLogin" class="headerlink" title="2.formLogin"></a>2.<a name="formLogin">formLogin</a></h2><p>配置成功 失败的路径和页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.failureHandler(<span class="keyword">new</span> SecurityAuthenticationFailureHandler())</span><br><span class="line">              .successHandler(<span class="keyword">new</span> SecurityAuthenticationSuccessHandler())</span><br><span class="line">              .loginPage(<span class="string">"/myLogin.html"</span>)</span><br><span class="line">              .loginProcessingUrl(<span class="string">"/login"</span>)</span><br><span class="line">              .defaultSuccessUrl(<span class="string">""</span>)</span><br><span class="line">              .authenticationDetailsSource(<span class="keyword">null</span>)</span><br><span class="line">              .failureForwardUrl(<span class="string">""</span>)</span><br><span class="line">              .failureUrl(<span class="string">""</span>)</span><br><span class="line">              .permitAll()</span><br></pre></td></tr></table></figure>



<h2 id="3-cors"><a href="#3-cors" class="headerlink" title="3. cors"></a>3. <a name="cors">cors</a></h2><p>跨域</p>
<h2 id="5-httpBasic"><a href="#5-httpBasic" class="headerlink" title="5.httpBasic"></a>5.<a name="httpBasic">httpBasic</a></h2><p>asic身份认证，是HTTP 1.0中引入的认证方案之一。虽然方案比较古老，同时存在安全缺陷，但由于实现简单，所以仍有部分场景下在使用，例如Tomcat自带的有个manager项目，访问这个项目需要Basic认证</p>
<p><strong>默认页面弹出个框</strong></p>
<h2 id="7-csrf"><a href="#7-csrf" class="headerlink" title="7.csrf"></a>7.<a name="csrf">csrf</a></h2><p>禁用csrf 保护功能</p>
<h2 id="9-logout"><a href="#9-logout" class="headerlink" title="9.logout"></a>9.<a name="logout">logout</a></h2><p>退出配置  默认的是“logout”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.addLogoutHandler(<span class="keyword">null</span>)</span><br><span class="line">               .clearAuthentication()</span><br><span class="line">               .deleteCookies()</span><br><span class="line">               .logoutRequestMatcher()</span><br><span class="line">               .logoutSuccessHandler()</span><br><span class="line">               .logoutSuccessUrl()</span><br><span class="line">               .logoutUrl()</span><br><span class="line">               .defaultLogoutSuccessHandlerFor()</span><br><span class="line">               .invalidateHttpSession()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>security</category>
      </categories>
      <tags>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title>security（3）自定义数据库认证与授权</title>
    <url>/posts/security3.html</url>
    <content><![CDATA[<p>这里会通过自定义数据库的方式或者用户信息，来进行认证与授权</p>
<a id="more"></a>

<p>先创建数据库的表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`security-study`</span>.<span class="string">`user2`</span>  (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">12</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`roles`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'多个用,隔开'</span>,</span><br><span class="line">  <span class="string">`enabled`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span> <span class="keyword">COMMENT</span> <span class="string">'1可用0不可用'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8mb4 <span class="keyword">COLLATE</span> = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`security-study`</span>.<span class="string">`users2`</span>(<span class="string">`id`</span>, <span class="string">`username`</span>, <span class="string">`password`</span>, <span class="string">`roles`</span>, <span class="string">`enabled`</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'admin'</span>, <span class="string">'123'</span>, <span class="string">'ROLE_admin,ROLE_user'</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`security-study`</span>.<span class="string">`users2`</span>(<span class="string">`id`</span>, <span class="string">`username`</span>, <span class="string">`password`</span>, <span class="string">`roles`</span>, <span class="string">`enabled`</span>) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'user'</span>, <span class="string">'123'</span>, <span class="string">'ROLE_user'</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h2 id="1-创建自定义UserDetails"><a href="#1-创建自定义UserDetails" class="headerlink" title="1. 创建自定义UserDetails"></a>1. 创建自定义UserDetails</h2><p>Security其实过程的的中间件是 UserDetails</p>
<p>UserDetails源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDetails</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    Collection&lt;? extends GrantedAuthority&gt; getAuthorities();</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getPassword</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getUsername</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建User   User实现UserDetails</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>  <span class="keyword">implements</span> <span class="title">UserDetails</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> enabled;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String roles;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;GrantedAuthority&gt; authorities;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;GrantedAuthority&gt; <span class="title">getAuthorities</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthorities</span><span class="params">( List&lt;GrantedAuthority&gt; authorities)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.authorities = authorities;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-创建service和mapper"><a href="#2-创建service和mapper" class="headerlink" title="2.创建service和mapper"></a>2.创建service和mapper</h2><blockquote>
<p>加配置 @MapperScan(“com.rongflag.chapter3.mapper”)</p>
</blockquote>
<p>mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsersMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from users2 where username=#&#123;username&#125;"</span>)</span><br><span class="line">     <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@Param(<span class="string">"username"</span>)</span> String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>service</p>
<p>这里需要实现UserDetailsService 让sercurity使用这个来进行认证</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUserDetailsService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UsersMapper usersMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        User user = usersMapper.getUserByUsername(username);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"未找到该用户："</span>+username);</span><br><span class="line">        &#125;</span><br><span class="line">        String roles = user.getRoles();</span><br><span class="line">        List&lt;GrantedAuthority&gt; grantedAuthorities = <span class="keyword">this</span>.createAuthorities(roles);</span><br><span class="line"><span class="comment">//        系统自带的转换权限 但是用自己的更好控制</span></span><br><span class="line"><span class="comment">//        List&lt;GrantedAuthority&gt; grantedAuthorities = AuthorityUtils.commaSeparatedStringToAuthorityList(user.getRoles());</span></span><br><span class="line">        user.setAuthorities(grantedAuthorities);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Descripton</span> 自行转换权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@rerturn</span> </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@auther</span> aihuxi</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;GrantedAuthority&gt; <span class="title">createAuthorities</span><span class="params">(String roles)</span> </span>&#123;</span><br><span class="line">        List&lt;GrantedAuthority&gt;lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(roles != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(roles))&#123;</span><br><span class="line">            String[] roleArr = roles.split(<span class="string">","</span>);</span><br><span class="line">            <span class="keyword">for</span> (String role:roleArr )&#123;</span><br><span class="line">                lists.add(<span class="keyword">new</span> SimpleGrantedAuthority(role));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-创建security和controller"><a href="#3-创建security和controller" class="headerlink" title="3.创建security和controller"></a>3.创建security和controller</h2><p>和前面是一样的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span>(debug = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/admin/**"</span>).hasRole(<span class="string">"admin"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/user/**"</span>).hasRole(<span class="string">"user"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/api/**"</span>).permitAll()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"user say hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"api"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"api say hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"admin"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"admin say hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就按照原来的验证即可</p>
<h2 id="4-踩坑记录"><a href="#4-踩坑记录" class="headerlink" title="4.踩坑记录"></a>4.踩坑记录</h2><ol>
<li>配置需要的权限是 “admin”,”user” 但是数据库只能保存“ROLE_admin”,”ROLE_user”，带有<strong>ROLE_</strong></li>
</ol>
<p>因为在securityConfig中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.antMatchers(&quot;&#x2F;admin&#x2F;**&quot;).hasRole(&quot;admin&quot;)</span><br></pre></td></tr></table></figure>

<p>往下看源码</p>
<p>org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer#hasRole</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">hasRole</span><span class="params">(String role)</span> </span>&#123;</span><br><span class="line">       Assert.notNull(role, <span class="string">"role cannot be null"</span>);</span><br><span class="line">       <span class="keyword">if</span> (role.startsWith(<span class="string">"ROLE_"</span>)) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"role should not start with 'ROLE_' since it is automatically inserted. Got '"</span> + role + <span class="string">"'"</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"hasRole('ROLE_"</span> + role + <span class="string">"')"</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>其实上一章也说过了，在自己初始化的时候会调用方法 自动加上 <strong>ROLE_</strong></p>
<ol>
<li>enabled 字段的问题</li>
</ol>
<p>enabled 是security验证自带字段  1是true 0是false  </p>
<p>其实自己使用最好是不使用这个字段，不容易控制</p>
<p>这个字段也是我在自己试的时候踩坑出来的</p>
]]></content>
      <categories>
        <category>security</category>
      </categories>
      <tags>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title>security（2）初识认证与授权</title>
    <url>/posts/security2.html</url>
    <content><![CDATA[<p>这里会基础的见一下认证和授权基于<strong>内存</strong>和<strong>数据库</strong></p>
<a id="more"></a>

<p>pom.xml(为了方便就把数据库配置一起加进去了)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rongflag<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>chapter2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>chapter2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc://localhost:3306/security-study?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br></pre></td></tr></table></figure>

<p>security配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span>(debug = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/admin/**"</span>).hasRole(<span class="string">"admin"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/user/**"</span>).hasRole(<span class="string">"user"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/api/**"</span>).permitAll()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>初始化3个controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"user say hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"api"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"api say hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"admin"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"admin say hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="1-内存"><a href="#1-内存" class="headerlink" title="1.内存"></a>1.内存</h2><p>通过InMemoryUserDetailsManager 去构建两个人</p>
<table>
<thead>
<tr>
<th>用户名</th>
<th>密码</th>
<th>权限</th>
</tr>
</thead>
<tbody><tr>
<td>user</td>
<td>123456</td>
<td>user</td>
</tr>
<tr>
<td>admin</td>
<td>123456</td>
<td>admin     user</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        InMemoryUserDetailsManager manager = <span class="keyword">new</span> InMemoryUserDetailsManager();</span><br><span class="line">        manager.createUser(User.withUsername(<span class="string">"user"</span>).password(<span class="string">"123456"</span>).roles(<span class="string">"user"</span>).build());</span><br><span class="line">        manager.createUser(User.withUsername(<span class="string">"admin"</span>).password(<span class="string">"123456"</span>).roles(<span class="string">"user"</span>, <span class="string">"admin"</span>).build());</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> NoOpPasswordEncoder.getInstance();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>即可以通过不同的url去验证权限是否成功了。</p>
<h2 id="2-JDBC"><a href="#2-JDBC" class="headerlink" title="2.JDBC"></a>2.JDBC</h2><p>创建两张表 users authorities</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;security-study&#96;.&#96;users&#96;  (</span><br><span class="line">  &#96;username&#96; varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,</span><br><span class="line">  &#96;password&#96; varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  &#96;enabled&#96; tinyint(1) NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;username&#96;) USING BTREE</span><br><span class="line">) ENGINE &#x3D; InnoDB CHARACTER SET &#x3D; utf8mb4 COLLATE &#x3D; utf8mb4_0900_ai_ci ROW_FORMAT &#x3D; Dynamic;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;security-study&#96;.&#96;authorities&#96;  (</span><br><span class="line">  &#96;username&#96; varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,</span><br><span class="line">  &#96;authority&#96; varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,</span><br><span class="line">  INDEX &#96;u_name&#96;(&#96;username&#96;) USING BTREE,</span><br><span class="line">  CONSTRAINT &#96;u_name&#96; FOREIGN KEY (&#96;username&#96;) REFERENCES &#96;security-study&#96;.&#96;users&#96; (&#96;username&#96;) ON DELETE RESTRICT ON UPDATE RESTRICT</span><br><span class="line">) ENGINE &#x3D; InnoDB CHARACTER SET &#x3D; utf8mb4 COLLATE &#x3D; utf8mb4_0900_ai_ci ROW_FORMAT &#x3D; Dynamic;</span><br></pre></td></tr></table></figure>

<p>和上面基本类似</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      JdbcUserDetailsManager manager = <span class="keyword">new</span> JdbcUserDetailsManager();</span><br><span class="line">      manager.setDataSource(dataSource);</span><br><span class="line">      manager.createUser(User.withUsername(<span class="string">"user"</span>).password(<span class="string">"123"</span>).roles(<span class="string">"user"</span>).build());</span><br><span class="line">      manager.createUser(User.withUsername(<span class="string">"admin"</span>).password(<span class="string">"123"</span>).roles(<span class="string">"user"</span>, <span class="string">"admin"</span>).build());</span><br><span class="line">      <span class="keyword">return</span> manager;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>启动的时候自动将构建的数据向users 和 authorities里面插入  这是自动的不用手加。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`security-study`</span>.<span class="string">`users`</span>(<span class="string">`username`</span>, <span class="string">`password`</span>, <span class="string">`enabled`</span>) <span class="keyword">VALUES</span> (<span class="string">'user'</span>, <span class="string">'123'</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`security-study`</span>.<span class="string">`users`</span>(<span class="string">`username`</span>, <span class="string">`password`</span>, <span class="string">`enabled`</span>) <span class="keyword">VALUES</span> (<span class="string">'admin'</span>, <span class="string">'123'</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`security-study`</span>.<span class="string">`authorities`</span>(<span class="string">`username`</span>, <span class="string">`authority`</span>) <span class="keyword">VALUES</span> (<span class="string">'user'</span>, <span class="string">'ROLE_user'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`security-study`</span>.<span class="string">`authorities`</span>(<span class="string">`username`</span>, <span class="string">`authority`</span>) <span class="keyword">VALUES</span> (<span class="string">'admin'</span>, <span class="string">'ROLE_admin'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`security-study`</span>.<span class="string">`authorities`</span>(<span class="string">`username`</span>, <span class="string">`authority`</span>) <span class="keyword">VALUES</span> (<span class="string">'admin'</span>, <span class="string">'ROLE_user'</span>);</span><br></pre></td></tr></table></figure>





<blockquote>
<p>这里重复启动的时候数据库数据不会删除 会报错 需要把数据库中数据清掉</p>
</blockquote>
<p>这里需要注意一点 自动加的时候 role里面会自动加上 ROLE_  看源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> User.<span class="function">UserBuilder <span class="title">roles</span><span class="params">(String... roles)</span> </span>&#123;</span><br><span class="line">         List&lt;GrantedAuthority&gt; authorities = <span class="keyword">new</span> ArrayList(roles.length);</span><br><span class="line">         String[] var3 = roles;</span><br><span class="line">         <span class="keyword">int</span> var4 = roles.length;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> var5 = <span class="number">0</span>; var5 &lt; var4; ++var5) &#123;</span><br><span class="line">             String role = var3[var5];</span><br><span class="line">             Assert.isTrue(!role.startsWith(<span class="string">"ROLE_"</span>), () -&gt; &#123;</span><br><span class="line">                 <span class="keyword">return</span> role + <span class="string">" cannot start with ROLE_ (it is automatically added)"</span>;</span><br><span class="line">             &#125;);</span><br><span class="line">             authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">"ROLE_"</span> + role));</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.authorities((Collection)authorities);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

<p>实验方式和上面类似</p>
]]></content>
      <categories>
        <category>security</category>
      </categories>
      <tags>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title>security(1)初始security</title>
    <url>/posts/security1.html</url>
    <content><![CDATA[<p>security在springcloud里面使用会好一些。现在就从头开始来进行security学习一遍。</p>
<a id="more"></a>

<h2 id="1-创建项目引入依赖"><a href="#1-创建项目引入依赖" class="headerlink" title="1. 创建项目引入依赖"></a>1. 创建项目引入依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rongflag<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>security-book<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>securiy学习<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="做个小测试"><a href="#做个小测试" class="headerlink" title="做个小测试"></a>做个小测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityBookApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloWord</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello security"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SecurityBookApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动的时候 在控制台会有</p>
<blockquote>
<p>Using generated security password: 873a219e-5a1c-4c25-8027-880fb484646e</p>
<p>默认用户名是 user</p>
</blockquote>
<p>直接登录 localhost:8080  </p>
<p>登录 user 和密码就可以进入了</p>
<h2 id="2-自定义用户名和密码"><a href="#2-自定义用户名和密码" class="headerlink" title="2. 自定义用户名和密码"></a>2. 自定义用户名和密码</h2><p>在resouces/application.properties 配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.security.user.name</span>=<span class="string">user</span></span><br><span class="line"><span class="meta">spring.security.user.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>

<p>restart </p>
<p>这样进入localhost:8080 用户名和密码就修改了</p>
<h2 id="3-表单验证"><a href="#3-表单验证" class="headerlink" title="3. 表单验证"></a>3. 表单验证</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在WebSecurityConfigurerAdapter里面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.logger.debug(<span class="string">"Using default configure(HttpSecurity). If subclassed this will potentially override subclass configure(HttpSecurity)."</span>);</span><br><span class="line">         ((HttpSecurity)((HttpSecurity)((ExpressionUrlAuthorizationConfigurer.AuthorizedUrl)http</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .anyRequest())  <span class="comment">// 验证所有的请求</span></span><br><span class="line">                .authenticated()</span><br><span class="line">                .and())</span><br><span class="line">                .formLogin() <span class="comment">// 表单验证</span></span><br><span class="line">                .and())</span><br><span class="line">                .httpBasic(); <span class="comment">// 允许用户使用http基本验证</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-自定义表单登录页"><a href="#4-自定义表单登录页" class="headerlink" title="4. 自定义表单登录页"></a>4. 自定义表单登录页</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .loginPage(<span class="string">"/myLogin.html"</span>) <span class="comment">// 登录页</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">"/login"</span>)<span class="comment">// 登录路径</span></span><br><span class="line">                .permitAll()</span><br><span class="line">                .and().csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Acced Form<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-top"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>LOGIN FORM<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"password"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"forgot"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>forgot Password<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Login"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-bottom"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>New User <span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&amp;nbsp Here<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样登录 就可以了</p>
<h2 id="5-其他配置"><a href="#5-其他配置" class="headerlink" title="5.其他配置"></a>5.其他配置</h2><p>比如成功过后 或者失败的一些操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .loginPage(<span class="string">"/myLogin.html"</span>)</span><br><span class="line">                .loginProcessingUrl(<span class="string">"/login"</span>)</span><br><span class="line">                .successHandler(<span class="keyword">new</span> AuthenticationSuccessHandler() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">                        httpServletResponse.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">                        PrintWriter out = httpServletResponse.getWriter();</span><br><span class="line">                        out.write(<span class="string">"&#123;\"error_code\":\"0\", \"message\":\"欢迎登录系统\"&#125;"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .failureHandler(<span class="keyword">new</span> AuthenticationFailureHandler() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">                        httpServletResponse.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">                        httpServletResponse.setStatus(<span class="number">401</span>);</span><br><span class="line">                        PrintWriter out = httpServletResponse.getWriter();</span><br><span class="line">                        <span class="comment">// 输出失败的原因</span></span><br><span class="line">                        out.write(<span class="string">"&#123;\"error_code\":\"401\", \"name\":\""</span> + e.getClass() + <span class="string">"\", \"message\":\""</span> + e.getMessage() + <span class="string">"\"&#125;"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">// 使登录页不设限访问</span></span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个成功过后失败过后就会有一定的提示了。</p>
]]></content>
      <categories>
        <category>security</category>
      </categories>
      <tags>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title>你好世界</title>
    <url>/posts/hello_world.html</url>
    <content><![CDATA[<h1 id="Hello"><a href="#Hello" class="headerlink" title="Hello"></a>Hello</h1><p>你好世界</p>
<a id="more"></a>

<p>全文内容</p>
]]></content>
      <categories>
        <category>测试分类</category>
      </categories>
      <tags>
        <tag>测试标签</tag>
      </tags>
  </entry>
</search>
